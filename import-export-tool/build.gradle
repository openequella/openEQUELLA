buildscript {
  dependencies {
    classpath group: 'com.liferay', name: 'com.liferay.gradle.plugins.wsdl.builder', version: '3.0.4'
  }

  repositories {
    maven {
      url 'https://repository-cdn.liferay.com/nexus/content/groups/public'
    }
  }
}

apply plugin: 'com.liferay.wsdl.builder'

allprojects {
  apply plugin: 'java'
  sourceCompatibility = 1.8
  version = '1.1.0'
  repositories {
    mavenCentral()
  }

  sourceSets {
    main {
      java {
        srcDir 'build/codegen'
        srcDir 'src/main/java'
      }
    }
  }

  dependencies {
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
    implementation group: 'javax.xml', name: 'jaxrpc-api', version: '1.1'
    implementation group: 'javax.xml.soap', name: 'javax.xml.soap-api', version: '1.4.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.13'
    implementation group: 'org.apache.logging.log4j', name: 'log4j', version: '2.23.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.23.1'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.17.0'
    implementation group: 'commons-discovery', name: 'commons-discovery', version: '0.5'
    implementation group: 'org.apache.axis', name: 'axis', version: '1.4'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.3.2'
    implementation group: 'wsdl4j', name: 'wsdl4j', version: '1.6.3'
    implementation group: 'net.sf.jpf', name: 'jpf', version: '1.5'
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '2.0.13'
    implementation fileTree(dir: '../Platform/Plugins/com.tle.platform.common/target/scala-2.13', include: ['*.jar'])
    implementation fileTree(dir: '../Source/Plugins/Platform/com.tle.platform.swing/target/scala-2.13', include: ['*.jar'])
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
  }
}

subprojects {
  apply plugin: 'application'
}

task importToolJar(type: Jar, description: 'Create a fat JAR for Import Tool') {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  archiveBaseName.set('import-tool')
  manifest {
    attributes('Main-Class': 'com.dytech.edge.importexport.importutil.ImportUtility',
      'Implementation-Title': 'import-tool',
      'Implementation-Version': archiveVersion
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

task exportToolJar(type: Jar, description: 'Create a fat JAR for Export Tool') {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  archiveBaseName.set('export-tool')
  manifest {
    attributes('Main-Class': 'com.dytech.edge.importexport.exportutil.ExportUtility',
      'Implementation-Title': 'export-tool',
      'Implementation-Version': archiveVersion
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

task createImportExportTools(dependsOn: [importToolJar,exportToolJar], description: 'Create fat JARs for both Import and Export Tool' ) {
  doLast {
    println "Import and export tools are created under $projectDir/build/libs"
  }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

task compileSbtProject(type: Exec, description: 'Assemble sbt dependencies') {
  def commands = ['./sbt','com_tle_platform_swing/assembly','com_tle_platform_common/assembly']
  if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
    commands.addAll(0, ['cmd', '/c'])
  }
  //sbt assembly is only available when called from sbt root project
  workingDir '../'
  commandLine commands as Object[]
}

// buildWSDL is a task provided by plugin: "com.liferay.wsdl.builder"
buildWSDL {
  destinationDir = file('build/codegen')
  generateOptions.mappings = ['http://soap.remoting.web.tle.com': 'com.tle.web.remoting.soap', 'http://lang.java': 'com.tle.web.remoting.exception']
  buildLibs = false
  includeWSDLs = false
}

//We do not need the jar task executed to create a jar of the whole project so disable it
jar.enabled = false
compileJava.dependsOn([buildWSDL,compileSbtProject] as Object[])
assemble.finalizedBy(createImportExportTools)
