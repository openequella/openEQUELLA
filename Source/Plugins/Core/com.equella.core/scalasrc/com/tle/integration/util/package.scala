/*
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0, (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.tle.integration

import java.net.URI
import scala.util.Try

package object util {

  /**
    * Use this val for the absence of detailed information in an integration.
    */
  val NO_FURTHER_INFO = "No further information"

  /**
    * Helper function for dealing with params sent the servlet endpoint. On the expectation that
    * all the params are a one-to-one value - so navigates around the need to handle the potential
    * list.
    *
    * @param params a collection of params received at one of the servlet request handlers.
    * @return a function which has wrapped over the `params` and can now be used simply with the
    *         name of an expected parameter. The function will return `None` if the param is not
    *         present
    */
  def getParam(params: Map[String, Array[String]]): String => Option[String] =
    (param: String) => params.get(param).flatMap(_.headOption)

  /**
    * Helper function for dealing with URI params, building on top of getParam. It takes the function
    * created from a call to getParam.
    *
    * @param param a function generated by `getParam`
    * @return a function which can be used to extract URI parameters from a list of params
    */
  def getUriParam(param: String => Option[String]): String => Option[URI] =
    (p: String) => param(p).flatMap(maybeUri => Try(new URI(maybeUri)).toOption)
}
